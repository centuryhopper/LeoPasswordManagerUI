@* @page "/" *@
@using Newtonsoft.Json

@attribute [Authorize]
@inject IPasswordManagerAPIConsumerService apiConsumerService
@inject ILocalStorageService localStorageService


<style>
    .centered_container {
        font-family: arial;
        font-size: 24px;
        margin: 25px;
        width: 350px;
        height: 200px;
        /*outline: dashed 1px black;*/
        /* Setup */
        position: relative;
    }

    .child {
        width: 250px;
        height: 150px;
        /*background-color: red;*/
        /* Center vertically and horizontally */
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
</style>


<AuthorizeView>
    <Authorized>
        @if (PasswordAccountModels is null)
        {
            <div class="centered_container">
                <div class="child">
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false"
                        Mode="ProgressBarMode.Indeterminate" />
                </div>
            </div>
        }
        else
        {
            <h1 class="text-center">Passwords</h1>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4"
                Text="Add New Password Account" Click="@InsertRow" Disabled="@(AccountsToInsert.Count > 0)" />

            <RadzenDataGrid @ref="dataGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@PasswordAccountModels"
                TItem="PasswordManagerAccountDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" ColumnWidth="200px"
                Sort="@Reset" Page="@Reset" Filter="@Reset"
                >
                <Columns>
                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Property="Id" Title="Account ID" Width="150px" />

                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Property="CreatedAt" Title="Created At"
                        Width="150px">
                        <Template Context="passwordAccountModel">
                            @passwordAccountModel.CreatedAt
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Property="LastUpdatedAt" Title="Last Updated At"
                        Width="180px">
                        <Template Context="passwordAccountModel">
                            @passwordAccountModel.LastUpdatedAt
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Property="Title" Title="Title" Width="150px">
                        <Template Context="passwordAccountModel">
                            @passwordAccountModel.Title
                        </Template>
                        <EditTemplate Context="passwordAccountModel">
                            <RadzenTextBox @bind-Value="passwordAccountModel.Title" Style="width:100%" Name="Title" />
                            <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Property="UserName" Title="UserName" Width="150px">
                        <Template Context="passwordAccountModel">
                            @passwordAccountModel.Username
                        </Template>

                        <EditTemplate Context="passwordAccountModel">
                            <RadzenTextBox @bind-Value="passwordAccountModel.Username" Style="width:100%; display: block"
                                Name="UserName" />
                            <RadzenRequiredValidator Text="UserName is required" Component="UserName" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Property="Password" Title="Password" Width="325px">
                        <Template Context="passwordAccountModel">
                            <RadzenFormField Text="Password" Variant="@variant">
                                <ChildContent>
                                    <RadzenTextBox
                                     @bind-Value="@passwordAccountModel.Password"
                                Visible="@(GetPasswordVisibility(passwordAccountModel?.Id ?? "false"))"  />
                                    <RadzenPassword @bind-Value="@passwordAccountModel.Password"
                                Visible="@(GetPasswordVisibility(passwordAccountModel?.Id ?? "false") == false)"/>
                                </ChildContent>
                                <End>
                                    <RadzenButton Icon="@(PasswordVisible[passwordAccountModel.Id!] ? "visibility" : "visibility_off")" Click="@(() => {
                                        PasswordVisible[passwordAccountModel.Id!] = !PasswordVisible[passwordAccountModel.Id!];
                                    })" Variant="Variant.Text" Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField>
                        </Template>

                        <EditTemplate Context="passwordAccountModel">
                            <RadzenFormField Text="Password" Variant="@variant">
                                <ChildContent>
                                    <RadzenTextBox 
                                    @bind-Value="@passwordAccountModel.Password"
                                Visible="@(GetPasswordVisibility(passwordAccountModel?.Id ?? "false"))"  />
                                    <RadzenPassword
                                    Name="Password"
                                     @bind-Value="@passwordAccountModel.Password"
                                Visible="@(GetPasswordVisibility(passwordAccountModel?.Id ?? "false") == false)"/>
                                </ChildContent>
                                <End>
                                    <RadzenButton Icon="@(PasswordVisible[passwordAccountModel.Id!] ? "visibility" : "visibility_off")" Click="@(() => {
                                        PasswordVisible[passwordAccountModel.Id!] = !PasswordVisible[passwordAccountModel.Id!];
                                    })" Variant="Variant.Text" Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField>
                            <RadzenRequiredValidator Text="Password is required" Component="Password" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    
                    <RadzenDataGridColumn TItem="PasswordManagerAccountDTO" Context="product" Filterable="false"
                        Sortable="false" TextAlign="TextAlign.Right" Width="150px">
                        <Template Context="passwordAccountModel">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                Size="ButtonSize.Medium" Click="@(args => EditRow(passwordAccountModel))"
                            @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                Click="@(args => DeleteRow(passwordAccountModel))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>

                        <EditTemplate Context="passwordAccountModel">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                                Size="ButtonSize.Medium" Click="@((args) => SaveRow(passwordAccountModel))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                Size="ButtonSize.Medium" class="my-1 ms-1"
                                Click="@((args) => CancelEdit(passwordAccountModel))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                Click="@(args => DeleteRow(passwordAccountModel))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

            <div class="container-fluid mt-5">
                <RadzenCard>
                    <div class="row px-3">
                        <div class="col-md-3 p-3">
                        </div>
                        <div class="col-md-3 p-3">
                            <RadzenButton Text="Export CSV" Icon="grid_on" Click="@Export" class="mb-4" />
                        </div>
                        <div class="col-md-3 p-3">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Import passwords</RadzenText>
                            <RadzenUpload 
                                @ref="upload" 
                                Auto="false" 
                                Multiple="false" 
                                Url=@($"http://localhost:5188/api/Passwords/upload/single/{UserId}")
                                Change=@(args => OnChange(args, "Manual Upload"))
                                Progress=@(args => OnProgress(args, "Manual Upload")) 
                                Complete="@(args => OnComplete(args))"
                                Error="@(args => OnError(args))"
                                class="w-100" 
                                ChooseText="Select File" />
                            
                            @if (upload is not null && upload.HasValue)
                            {
                                <RadzenButton Text="Upload" Click=@(args => UploadDocument(args)) class="d-block mt-4" />
                            }
                            <div>
                                <span class="mt-3" style="font-weight:bold;">Click on the link to get the CSV file format sample: <a href="templates/example.csv">Example File</a></span>
                            </div>
                        </div>
                        <div class="col-md-3 p-3">
                        </div>
                    </div>
                </RadzenCard>
            </div>

            @* @if (!string.IsNullOrEmpty(uploadResult))
            {
                <p>@uploadResult</p>
            } *@
        }

    </Authorized>
    <NotAuthorized>
        You are not allowed to access this page
    </NotAuthorized>
</AuthorizeView>

@* TODO make sure delete function doesn't reset the whole list back to page 1 *@
@code {
    private IEnumerable<PasswordManagerAccountDTO> PasswordAccountModels;
    private RadzenDataGrid<PasswordManagerAccountDTO> dataGrid;
    private PasswordManagerAccountDTO? PasswordToInsert = null;
    private PasswordManagerAccountDTO? PasswordToUpdate = null;
    private Dictionary<string, bool> PasswordVisible = new();
    private Variant variant = Variant.Outlined;
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<PasswordManagerAccountDTO> AccountsToInsert = new List<PasswordManagerAccountDTO>();
    private List<PasswordManagerAccountDTO> AccountsToUpdate = new List<PasswordManagerAccountDTO>();
    
    private string? UserId {get;set;}

    private void Reset()
    {
        PasswordToInsert = null;
        PasswordToUpdate = null;


        AccountsToInsert.Clear();
        AccountsToUpdate.Clear();
    }

    private void Reset(PasswordManagerAccountDTO accountDTO)
    {
        AccountsToInsert.Remove(accountDTO);
        AccountsToUpdate.Remove(accountDTO);
    }

    protected override async Task OnInitializedAsync()
    {
        //await jsRuntime.InvokeVoidAsync("alert", "hello");

        PasswordAccountModels = await apiConsumerService.GetAllAccountsAsync();
        UserId = await localStorageService.GetItemAsync<string>("userid");
    }

    private bool GetPasswordVisibility(string Id)
    {
        if (string.IsNullOrEmpty(Id))
        {
            return false;
        }
        if (!PasswordVisible.ContainsKey(Id))
        {
            PasswordVisible.Add(Id, false);
        }

        return PasswordVisible[Id];
    }

    private async Task EditRow(PasswordManagerAccountDTO model)
    {
        PasswordToUpdate = model;

        if (AccountsToInsert.Count > 0)
        {
            Reset();
        }

        AccountsToUpdate.Add(model);


        // changes the row into edit mode (deactivate template and activate edittemplate)
        await dataGrid.EditRow(model);
    }

    private async Task OnUpdateRow(PasswordManagerAccountDTO model)
    {
        // reset insert variable
        if (PasswordToInsert == model)
        {
            PasswordToInsert = null;
        }

        PasswordToUpdate = null;

        Reset(model);

        await apiConsumerService.UpdateAsync(model);
    }

    private async Task SaveRow(PasswordManagerAccountDTO model)
    {
        if (model is null || string.IsNullOrEmpty(model.Title) || string.IsNullOrEmpty(model.Username) || string.IsNullOrEmpty(model.Password))
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(PopupDialog.Message), "Please make sure you have filled out all the fields before submitting.");
            Modal.Show<PopupDialog>("Error", parameters);
            return;
        }

        // System.Console.WriteLine(model);
        await dataGrid.UpdateRow(model);

        PasswordAccountModels = await apiConsumerService.GetAllAccountsAsync();

        PasswordToInsert = PasswordToUpdate = null;
    }

    private async Task OnCreateRow(PasswordManagerAccountDTO model)
    {
        PasswordToInsert = null;

        // track password visibility
        PasswordVisible[model.Id!] = false;

        var create = await apiConsumerService.CreateAsync(model);
        PasswordAccountModels = await apiConsumerService.GetAllAccountsAsync();
        //System.Console.WriteLine(create);

        AccountsToInsert.Remove(model);
    }

    private Task CancelEdit(PasswordManagerAccountDTO model)
    {
        if (model == PasswordToInsert)
        {
            PasswordToInsert = null;
        }

        Reset(model);

        PasswordVisible.Remove(model.Id!);

        PasswordToUpdate = null;

        dataGrid.CancelEditRow(model);
        return Task.CompletedTask;
    }



    private async Task DeleteRow(PasswordManagerAccountDTO model)
    {
        if (model == PasswordToInsert)
        {
            PasswordToInsert = null;
        }

        if (model == PasswordToUpdate)
        {
            PasswordToUpdate = null;
        }

        Reset(model);

        if (PasswordAccountModels.FirstOrDefault(acc => acc.Id == model.Id) is not null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ConfirmationDialog.Message), "Are you sure you want to delete this record?");
            var confirmModal = Modal.Show<ConfirmationDialog>("Warning", parameters);
            var modalResult = await confirmModal.Result;

            if (!modalResult.Cancelled)
            {
                // Console.WriteLine("deleting row");
                var response = await apiConsumerService.DeletePasswordManagerAccountAsync(model);
                // Console.WriteLine(response);
                await dataGrid.Reload();
                //PasswordAccountModels = await apiConsumerService.GetAllAccountsAsync();
            }
        }
        else
        {
            dataGrid.CancelEditRow(model);
            await dataGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        PasswordToInsert = new PasswordManagerAccountDTO
        {
            Id = Guid.NewGuid().ToString(),
            //Userid = UserId!,
        };

        Reset();

        //var accountDTO = new PasswordManagerAccountDTO();
        AccountsToInsert.Add(PasswordToInsert);
        await dataGrid!.InsertRow(PasswordToInsert);
    }

    private async void Export()
    {
        Console.WriteLine("exporting...");
        
        StringBuilder builder = new();

        builder.AppendLine("Title,Username,Password,CreatedAt,LastUpdatedAt");

        foreach (var acc in PasswordAccountModels)
        {
            builder.AppendLine($"{acc.Title},{acc.Username},{acc.Password.Replace(",", "+")},{acc.CreatedAt},{acc.LastUpdatedAt}");
        }

        await jsRuntime.InvokeVoidAsync("saveAsFile", "sensitive.csv", builder.ToString());
    }

    private RadzenUpload upload;

    private void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            Console.WriteLine($"File: {file.Name} / {file.Size} bytes");
        }
        Console.WriteLine($"{name} changed");
    }

    private async Task OnProgress(UploadProgressArgs args, string name)
    {
        Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");
        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }

            Console.WriteLine("upload complete");
        }
    }

    private void UploadDocument(MouseEventArgs args)
    {
        upload.Upload();
    }

    private string uploadResult {get;set;}
    private void OnComplete(UploadCompleteEventArgs args)
    {
        //Console.WriteLine(args.RawResponse);
        ServiceResponse? response = JsonConvert.DeserializeObject<ServiceResponse>(args.RawResponse);

        if (response is not null && response.message.Contains("success"))
        {
            uploadResult = "File uploaded successfully.";
        }
        else
        {
            uploadResult = $"Error uploading file: {response?.message ?? "error"}";
        }

        var parameters = new ModalParameters();
        parameters.Add(nameof(PopupDialog.Message), response!.message);
        Modal.Show<PopupDialog>("Info", parameters);

    }

    private void OnError(UploadErrorEventArgs args)
    {
        uploadResult = $"Error: {args.Message}";
    }


}